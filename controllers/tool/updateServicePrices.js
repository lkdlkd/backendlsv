const cron = require('node-cron');
const axios = require('axios');
const Service = require('../../models/server');
const SmmSv = require('../../models/SmmSv');
const Telegram = require('../../models/Telegram');

// H√†m ki·ªÉm tra v√† c·∫≠p nh·∫≠t gi√° d·ªãch v·ª•
async function updateServicePrices() {
  try {
    // L·∫•y to√†n b·ªô d·ªãch v·ª• trong CSDL
    const services = await Service.find({});
    console.log(`ƒêang ki·ªÉm tra ${services.length} d·ªãch v·ª•...`);

    // Gom nh√≥m c√°c service theo DomainSmm
    const smmGroups = {};
    for (const service of services) {
      if (!smmGroups[service.DomainSmm]) smmGroups[service.DomainSmm] = [];
      smmGroups[service.DomainSmm].push(service);
    }

    // Duy·ªát qua t·ª´ng nh√≥m DomainSmm, ch·ªâ g·ªçi API 1 l·∫ßn cho m·ªói nh√≥m
    for (const domain in smmGroups) {
      const smmSvConfig = await SmmSv.findOne({ name: domain });
      if (!smmSvConfig || !smmSvConfig.url_api || !smmSvConfig.api_token) {
        console.warn(`C·∫•u h√¨nh API ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p cho domain ${domain}`);
        continue;
      }
      let apiResponse;
      try {
        apiResponse = await axios.post(smmSvConfig.url_api, {
          key: smmSvConfig.api_token,
          action: 'services',
        });
      } catch (err) {
        console.warn(`L·ªói g·ªçi API cho domain ${domain}:`, err.message);
        continue;
      }
      if (!apiResponse.data || !Array.isArray(apiResponse.data)) {
        console.warn(`D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá cho domain ${domain}`);
        continue;
      }
      // Duy·ªát qua t·ª´ng service thu·ªôc domain n√†y
      await Promise.all(
        smmGroups[domain].map(async (serviceItem) => {
          try {
            const apiService = apiResponse.data.find(
              (s) => Number(s.service) === Number(serviceItem.serviceId)
            );
            if (!apiService) {
              console.warn(`Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• ${serviceItem.serviceId} trong API cho ${serviceItem.name}`);
              serviceItem.isActive = false;
              await serviceItem.save();
              return;
            }
               // ‚úÖ C·∫≠p nh·∫≠t min v√† max n·∫øu c√≥ trong 
            if (apiService.min && apiService.max) {
  if (serviceItem.min !== apiService.min || serviceItem.max !== apiService.max) {
    serviceItem.min = apiService.min;
    serviceItem.max = apiService.max;
    
  }
}
            const apiRate = apiService.rate * smmSvConfig.tigia;
            const dbRate = serviceItem.rate;
            // console.log(`Ki·ªÉm tra d·ªãch v·ª•: ${serviceItem.name} - Gi√° API: ${apiRate}, Gi√° CSDL: ${dbRate}`);
            // So s√°nh v√† c·∫≠p nh·∫≠t gi√°
            if ( 
              typeof serviceItem.originalRate === 'number' &&
              dbRate < apiRate &&
              smmSvConfig.update_price === "on"
            ) {
              let newRate = apiRate * (1 + Number(smmSvConfig.price_update) / 100); // c·∫≠p nh·∫≠t v·ªõi t·ª∑ l·ªá tƒÉng ƒë√£ c·∫•u h√¨nh
              newRate = Math.round(newRate * 10000) / 10000; // L√†m tr√≤n 4 ch·ªØ s·ªë th·∫≠p ph√¢n
              const oldRate = serviceItem.rate;
              serviceItem.rate = newRate;
              await serviceItem.save();
              // console.log(`ƒê√£ c·∫≠p nh·∫≠t gi√° c·ªßa ${serviceItem.name} th√†nh ${newRate}`);

              // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh (TƒÇNG GI√Å)
              const teleConfig = await Telegram.findOne();
              const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000); // Gi·ªù Vi·ªát Nam (UTC+7)
              if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
                const telegramMessage = `üìå *C·∫≠p nh·∫≠t gi√° TƒÇNG!*\n` +
                  `üë§ *D·ªãch v·ª•:* ${serviceItem.name}\n` +
                  `üîπ *Gi√° c≈©:* ${oldRate}\n` +
                  `üîπ *Gi√° m·ªõi:* ${newRate}\n` +
                  `üîπ *Ngu·ªìn:* ${smmSvConfig.name}\n` +
                  `üîπ *Th·ªùi gian:* ${taoluc.toLocaleString("vi-VN", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                    second: "2-digit",
                  })}\n`;
                try {
                  await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
                    chat_id: teleConfig.chatId,
                    text: telegramMessage,
                  });
                  console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
                } catch (telegramError) {
                  console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
                }
              }
              // Sau khi tƒÉng gi√°, c·∫≠p nh·∫≠t l·∫°i originalRate
              serviceItem.originalRate = apiRate;
              await serviceItem.save();
            } else if (
              typeof serviceItem.originalRate === 'number' &&
              apiRate < serviceItem.originalRate &&
              smmSvConfig.update_price === "on"
            ) {
              let newRate = apiRate * (1 + Number(smmSvConfig.price_update) / 100);
              newRate = Math.round(newRate * 10000) / 10000;
              const oldRate = serviceItem.rate;
              serviceItem.rate = newRate;
              await serviceItem.save();
              // console.log(`ƒê√£ gi·∫£m gi√° c·ªßa ${serviceItem.name} th√†nh ${newRate}`);

              // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh (GI·∫¢M GI√Å)
              const teleConfig = await Telegram.findOne();
              const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000); // Gi·ªù Vi·ªát Nam (UTC+7)
              if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
                const telegramMessage = `üìå *C·∫≠p nh·∫≠t gi√° GI·∫¢M!*\n` +
                  `üë§ *D·ªãch v·ª•:* ${serviceItem.name}\n` +
                  `üîπ *Gi√° c≈©:* ${oldRate}\n` +
                  `üîπ *Gi√° m·ªõi:* ${newRate}\n` +
                  `üîπ *Ngu·ªìn:* ${smmSvConfig.name}\n` +
                  `üîπ *Th·ªùi gian:* ${taoluc.toLocaleString("vi-VN", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                    second: "2-digit",
                  })}\n`;
                try {
                  await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
                    chat_id: teleConfig.chatId,
                    text: telegramMessage,
                  });
                  console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
                } catch (telegramError) {
                  console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
                }
              }
              // Sau khi gi·∫£m gi√°, c·∫≠p nh·∫≠t l·∫°i originalRate
              serviceItem.originalRate = apiRate;
              await serviceItem.save();
            } else {
              // N·∫øu kh√¥ng tƒÉng/gi·∫£m gi√°, v·∫´n c·∫≠p nh·∫≠t originalRate n·∫øu ch∆∞a c√≥
              if (typeof serviceItem.originalRate !== 'number' || serviceItem.originalRate !== apiRate) {
                serviceItem.originalRate = apiRate;
                await serviceItem.save();
              }
              // console.log(`Gi√° c·ªßa ${serviceItem.name} ƒë√£ b·∫±ng ho·∫∑c cao h∆°n gi√° API, b·ªè qua c·∫≠p nh·∫≠t.`);
            }
          } catch (innerError) {
            console.error(`L·ªói khi x·ª≠ l√Ω d·ªãch v·ª• ${serviceItem.name}:`, innerError.message);
          }
        })
      );
    }
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:', error.message);
  }
}
const Platform = require('../../models/platform');

async function updateTypeToPlatformId() {
  const services = await Service.find({});
  console.log(`ƒêang c·∫≠p nh·∫≠t type cho ${services} d·ªãch v·ª•...`);
  for (const service of services) {
    console.log('type string:', service.type);

    if (typeof service.type === 'string') {

      const platform = await Platform.findOne({ name: service.type });
      if (platform) {
        service.type = platform._id;
        console.log(`C·∫≠p nh·∫≠t type cho d·ªãch v·ª• ${service.name} th√†nh ${platform._id}`);
        console.log(service)
        await service.save();
      }
    }
  }
  console.log('C·∫≠p nh·∫≠t ho√†n t·∫•t!');
}

// Cronjob: Ki·ªÉm tra gi√° d·ªãch v·ª• m·ªói 30 gi√¢y
setInterval(() => {
  console.log('Cron job: Ki·ªÉm tra gi√° d·ªãch v·ª• m·ªói 30 gi√¢y');
  updateServicePrices();
  // updateTypeToPlatformId();

}, 60000); // 30,000 milliseconds = 30 seconds
