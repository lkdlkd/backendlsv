const cron = require('node-cron');
const Order = require('../../models/Order');
const Service = require('../../models/server'); // ƒê·∫£m b·∫£o ƒë√∫ng t√™n file model
const SmmSv = require('../../models/SmmSv');
const SmmApiService = require('../Smm/smmServices');
const User = require('../../models/User'); // Th√™m d√≤ng n√†y ·ªü ƒë·∫ßu file ƒë·ªÉ import model User
const HistoryUser = require('../../models/History');
const axios = require('axios');
const Telegram = require('../../models/Telegram');

function mapStatus(apiStatus) {
  switch (apiStatus) {
    case "Pending":
      return "Pending";
    case "Processing":
      return "Processing";
    case "Completed":
      return "Completed";
    case "In progress":
      return "In progress";
    case "Partial":
      return "Partial";
    case "Canceled":
      return "Canceled";
    default:
      return null;
  }
}

async function checkOrderStatus() {
  try {
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
    const runningOrders = await Order.find({
      status: { $in: ["Pending", "In progress", "Processing"] },
      createdAt: { $gte: threeMonthsAgo }
    });
    if (runningOrders.length === 0) {
      console.log("Kh√¥ng c√≥ ƒë∆°n h√†ng ƒëang ch·∫°y.");
      return;
    }
    // console.log(`ƒêang ki·ªÉm tra tr·∫°ng th√°i c·ªßa ${runningOrders.length} ƒë∆°n h√†ng...`);

    // Cache cho Service v√† SmmSv ƒë·ªÉ tr√°nh truy v·∫•n l·∫∑p l·∫°i
    const serviceCache = {};
    const smmConfigCache = {};
    const groups = {};

    for (const order of runningOrders) {
      // Cache Service
      let service = serviceCache[order.SvID];
      if (!service) {
        service = await Service.findOne({ serviceId: order.SvID });
        if (service) {
          serviceCache[order.SvID] = service;
        } else {
          console.warn(`Kh√¥ng t√¨m th·∫•y Service cho ƒë∆°n ${order.Madon} (SvID: ${order.SvID}, namesv: ${order.namesv})`);
        }
      }
      // L·∫•y DomainSmm: ∆∞u ti√™n t·ª´ Service, n·∫øu kh√¥ng c√≥ th√¨ l·∫•y t·ª´ Order
      const domainSmm = service && service.DomainSmm ? service.DomainSmm : order.DomainSmm;
      if (!domainSmm) {
        console.warn(`Kh√¥ng t√¨m th·∫•y DomainSmm cho ƒë∆°n ${order.Madon} (SvID: ${order.SvID}, namesv: ${order.namesv})`);
        continue;
      }

      // Cache SmmSv
      let smmConfig = smmConfigCache[domainSmm];
      if (!smmConfig) {
        smmConfig = await SmmSv.findOne({ name: domainSmm });
        if (!smmConfig || !smmConfig.url_api || !smmConfig.api_token) {
          // N·∫øu kh√¥ng c√≥ c·∫•u h√¨nh SMM th√¨ b·ªè qua ƒë∆°n n√†y
          continue;
        }
        smmConfigCache[domainSmm] = smmConfig;
      }

      const groupKey = smmConfig._id.toString();
      if (!groups[groupKey]) {
        groups[groupKey] = {
          smmService: new SmmApiService(smmConfig.url_api, smmConfig.api_token),
          orders: [],
        };
      }
      groups[groupKey].orders.push(order);
    }

    // Duy·ªát qua t·ª´ng nh√≥m v√† g·ªçi API ki·ªÉm tra tr·∫°ng th√°i
    for (const groupKey in groups) {
      const { smmService, orders } = groups[groupKey];

      if (orders.length === 1) {
        const order = orders[0];
        // L·∫•y smmConfig t·ª´ cache theo groupKey
        const smmConfig = smmConfigCache[order.DomainSmm] || null;
        let phihoan = 1000;
        if (smmConfig && typeof smmConfig.phihoan === 'number') phihoan = smmConfig.phihoan;

        try {
          const statusObj = await smmService.status(order.orderId);
          // console.log(`API tr·∫£ v·ªÅ cho ƒë∆°n ${order.orderId}:`, statusObj);

          const mappedStatus = mapStatus(statusObj.status);
          if (mappedStatus !== null) order.status = mappedStatus;
          if (statusObj.start_count !== undefined) order.start = statusObj.start_count;
          if (
            ['Pending', 'In progress', 'Processing'].includes(mappedStatus) &&
            Number(statusObj.remains) === 0
          ) {
            order.dachay = 0;
          } else if (statusObj.remains !== undefined) {
            order.dachay = order.quantity - Number(statusObj.remains);
          }
          const user = await User.findOne({ username: order.username });
          const tiencu = user.balance || 0;
          if (mappedStatus === 'Partial') {
            if (user) {
              const soTienHoan = ((statusObj.remains || 0) * order.rate) - phihoan;
              if ((soTienHoan) < 50) {
                order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
                await order.save();
                // console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
                continue;
              }
              let trangthai = false;
              if (smmConfig && smmConfig.autohoan === 'on') {
                user.balance = (user.balance || 0) + soTienHoan;
                await user.save();
                trangthai = true;
              }
              const soTienHoanFormatted = Number(Math.round(soTienHoan)).toLocaleString("en-US");
              const historyData = new HistoryUser({
                username: order.username,
                madon: order.Madon,
                hanhdong: "Ho√†n ti·ªÅn",
                link: order.link,
                tienhientai: tiencu,
                tongtien: soTienHoan,
                tienconlai: trangthai ? user.balance : tiencu,
                createdAt: new Date(),
                mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoanFormatted} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${order.quantity} cho uid ${order.link} v√† ${phihoan} ph√≠ d·ªãch v·ª•${trangthai ? '' : ' (ch·ªù duy·ªát)'}`,
                trangthai: trangthai,
              });
              await historyData.save();
              // console.log(`ƒê√£ ${trangthai ? 'ho√†n ti·ªÅn' : 'l∆∞u ch·ªù duy·ªát'} cho user ${user._id} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);

              const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000); // Gi·ªù Vi·ªát Nam (UTC+7)
              // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
              const teleConfig = await Telegram.findOne();
              if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
                const telegramMessage =
                  `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n` +
                  `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                  `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoanFormatted}\n` +
                  `üîπ *T∆∞∆°ng ·ª©ng s·ªë l∆∞·ª£ng:* ${statusObj.remains} - Rate : ${order.rate}\n` +
                  `üî∏ *D·ªãch v·ª•:* ${order.namesv}\n` +
                  `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString("vi-VN", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                    second: "2-digit",
                  })}\n`;
                try {
                  await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
                    chat_id: teleConfig.chatId,
                    text: telegramMessage,
                    parse_mode: "Markdown",
                  });
                  console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                } catch (telegramError) {
                  console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                }
              }
              order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
            }
          }
          if (mappedStatus === 'Canceled') {
            if (user) {
              const soTienHoan = ((order.quantity || 0) * order.rate) - phihoan;
              if ((soTienHoan) < 50) {
                order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
                await order.save();
                console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
                continue;
              }
              let trangthai = false;
              if (smmConfig && smmConfig.autohoan === 'on') {
                user.balance = (user.balance || 0) + soTienHoan;
                await user.save();
                trangthai = true;
              }
              const soTienHoanFormatted = Number(Math.round(soTienHoan)).toLocaleString("en-US");
              const historyData = new HistoryUser({
                username: order.username,
                madon: order.Madon,
                hanhdong: "Ho√†n ti·ªÅn",
                link: order.link,
                tienhientai: tiencu,
                tongtien: soTienHoan,
                tienconlai: trangthai ? user.balance : tiencu,
                createdAt: new Date(),
                mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoanFormatted} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${order.quantity} cho uid ${order.link} v√† ${phihoan} ph√≠ d·ªãch v·ª•${trangthai ? '' : ' (ch·ªù duy·ªát)'}`,
                trangthai: trangthai,
              });
              await historyData.save();
              // console.log(`ƒê√£ ${trangthai ? 'ho√†n ti·ªÅn' : 'l∆∞u ch·ªù duy·ªát'} cho user ${user._id} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);
              const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000); // Gi·ªù Vi·ªát Nam (UTC+7)
              // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
              const teleConfig = await Telegram.findOne();
              if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
                const telegramMessage =
                  `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n` +
                  `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                  `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoanFormatted}\n` +
                  `üîπ *T∆∞∆°ng ·ª©ng s·ªë l∆∞·ª£ng:* ${order.quantity} - Rate : ${order.rate}\n` +
                  `üî∏ *D·ªãch v·ª•:* ${order.namesv}\n` +
                  `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString("vi-VN", {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                    second: "2-digit",
                  })}\n`;
                try {
                  await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
                    chat_id: teleConfig.chatId,
                    text: telegramMessage,
                    parse_mode: "Markdown",
                  });
                  console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                } catch (telegramError) {
                  console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                }
              }
              order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
            }
          }
          await order.save();
          // console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
        } catch (apiError) {
          console.error(`L·ªói API tr·∫°ng th√°i cho ƒë∆°n ${order.orderId}:`, apiError.message);
        }
      } else {
        // Multi status
        const orderIds = orders.map(order => order.orderId);
        const orderIdChunks = chunkArray(orderIds, 100);
        let allData = {};

        for (const chunk of orderIdChunks) {
          const data = await smmService.multiStatus(chunk);
          allData = { ...allData, ...data };
        }
        // X·ª≠ l√Ω k·∫øt qu·∫£ multi status
        for (const orderId in allData) {
          if (allData.hasOwnProperty(orderId)) {
            const statusObj = allData[orderId];
            const order = orders.find(o => o.orderId.toString() === orderId);
            if (order) {
              // L·∫•y smmConfig t·ª´ cache
              const smmConfig = smmConfigCache[order.DomainSmm] || null;
              let phihoan = 1000;
              if (smmConfig && typeof smmConfig.phihoan === 'number') phihoan = smmConfig.phihoan;
              const mappedStatus = mapStatus(statusObj.status);
              // console.log(`API tr·∫£ v·ªÅ cho ƒë∆°n ${orderId}:`, statusObj);
              if (mappedStatus !== null) order.status = mappedStatus;
              if (statusObj.start_count !== undefined) order.start = statusObj.start_count;
              if (
                ['Pending', 'In progress', 'Processing'].includes(mappedStatus) &&
                Number(statusObj.remains) === 0
              ) {
                order.dachay = 0;
              } else if (statusObj.remains !== undefined) {
                order.dachay = order.quantity - Number(statusObj.remains);
              }
              // N·∫øu tr·∫°ng th√°i l√† Canceled ho·∫∑c Partial th√¨ ho√†n ti·ªÅn ph·∫ßn c√≤n l·∫°i
              const user = await User.findOne({ username: order.username });
              const tiencu = user.balance || 0;
              if (mappedStatus === 'Partial') {
                if (user) {
                  const soTienHoan = ((statusObj.remains || 0) * order.rate) - phihoan;
                  if ((soTienHoan) < 50) {
                    order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
                    await order.save();
                    // console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
                    continue;
                  }
                  let trangthai = false;
                  if (smmConfig && smmConfig.autohoan === 'on') {
                    user.balance = (user.balance || 0) + soTienHoan;
                    await user.save();
                    trangthai = true;
                  }
                  const soTienHoanFormatted = Number(Math.round(soTienHoan)).toLocaleString("en-US");
                  const historyData = new HistoryUser({
                    username: order.username,
                    madon: order.Madon,
                    hanhdong: "Ho√†n ti·ªÅn",
                    link: order.link,
                    tienhientai: tiencu,
                    tongtien: soTienHoan,
                    tienconlai: trangthai ? user.balance : tiencu,
                    createdAt: new Date(),
                    mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoanFormatted} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${statusObj.remains} cho uid ${order.link} v√† ${phihoan} ph√≠ d·ªãch v·ª•${trangthai ? '' : ' (ch·ªù duy·ªát)'}`,
                    trangthai: trangthai,
                  });
                  await historyData.save();
                  // console.log(`ƒê√£ ${trangthai ? 'ho√†n ti·ªÅn' : 'l∆∞u ch·ªù duy·ªát'} cho user ${user.username} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);
                  const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000); // Gi·ªù Vi·ªát Nam (UTC+7)
                  // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
                  const teleConfig = await Telegram.findOne();
                  if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
                    const telegramMessage =
                      `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n` +
                      `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                      `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoanFormatted}\n` +
                      `üîπ *T∆∞∆°ng ·ª©ng s·ªë l∆∞·ª£ng:* ${order.quantity} - Rate : ${order.rate}\n` +
                      `üî∏ *D·ªãch v·ª•:* ${order.namesv}\n` +
                      `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString("vi-VN", {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric",
                        hour: "2-digit",
                        minute: "2-digit",
                        second: "2-digit",
                      })}\n`;
                    try {
                      await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
                        chat_id: teleConfig.chatId,
                        text: telegramMessage,
                        parse_mode: "Markdown",
                      });
                      console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                    } catch (telegramError) {
                      console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                    }
                  }
                  order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
                }
              }
              if (mappedStatus === 'Canceled') {
                if (user) {
                  const soTienHoan = ((order.quantity || 0) * order.rate) - phihoan;
                  if ((soTienHoan) < 50) {
                    order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
                    await order.save();
                    // console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
                    continue;
                  }
                  let trangthai = false;
                  if (smmConfig && smmConfig.autohoan === 'on') {
                    user.balance = (user.balance || 0) + soTienHoan;
                    await user.save();
                    trangthai = true;
                  }

                  const soTienHoanFormatted = Number(Math.round(soTienHoan)).toLocaleString("en-US");
                  const historyData = new HistoryUser({
                    username: order.username,
                    madon: order.Madon,
                    hanhdong: "Ho√†n ti·ªÅn",
                    link: order.link,
                    tienhientai: tiencu,
                    tongtien: soTienHoan,
                    tienconlai: trangthai ? user.balance : tiencu,
                    createdAt: new Date(),
                    mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoanFormatted} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${order.quantity} cho uid ${order.link} v√† ${phihoan} ph√≠ d·ªãch v·ª•${trangthai ? '' : ' (ch·ªù duy·ªát)'}`,
                    trangthai: trangthai,
                  });
                  await historyData.save();
                  // console.log(`ƒê√£ ${trangthai ? 'ho√†n ti·ªÅn' : 'l∆∞u ch·ªù duy·ªát'} cho user ${user._id} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);
                  const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000); // Gi·ªù Vi·ªát Nam (UTC+7)
                  // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
                  const teleConfig = await Telegram.findOne();
                  if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
                    const telegramMessage =
                      `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n` +
                      `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                      `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoanFormatted}\n` +
                      `üîπ *T∆∞∆°ng ·ª©ng s·ªë l∆∞·ª£ng:* ${order.quantity} - Rate : ${order.rate}\n` +
                      `üî∏ *D·ªãch v·ª•:* ${order.namesv}\n` +
                      `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString("vi-VN", {
                        day: "2-digit",
                        month: "2-digit",
                        year: "numeric",
                        hour: "2-digit",
                        minute: "2-digit",
                        second: "2-digit",
                      })}\n`;
                    try {
                      await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
                        chat_id: teleConfig.chatId,
                        text: telegramMessage,
                        parse_mode: "Markdown",
                      });
                      console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                    } catch (telegramError) {
                      console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                    }
                  }
                  order.iscancel = false; // ƒê√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn
                }
              }
              await order.save();
              // console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
            } else {
              console.warn(`Kh√¥ng t√¨m th·∫•y ƒë∆°n n√†o t∆∞∆°ng ·ª©ng v·ªõi orderId ${orderId}`);
            }
          }
        }
      }
    }
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng:", error.message);
  }
}

// ƒê·∫∑t l·ªãch ch·∫°y cron job, v√≠ d·ª•: ch·∫°y m·ªói 1 ph√∫t
cron.schedule('*/1 * * * *', () => {
  console.log("Cron job: B·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng");
  checkOrderStatus();
});

const chunkArray = (arr, size) => {
  const result = [];
  for (let i = 0; i < arr.length; i += size) {
    result.push(arr.slice(i, i + size));
  }
  return result;
};

