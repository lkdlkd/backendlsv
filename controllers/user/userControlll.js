const jwt = require("jsonwebtoken");
const User = require("../../models/User");
const HistoryUser = require("../../models/History");
const axios = require("axios");
const crypto = require("crypto");
const Telegram = require('../../models/Telegram');
const speakeasy = require('speakeasy');
const QRCode = require('qrcode');
const Order = require('../../models/Order');
// Helper g·ª≠i tin nh·∫Øn Telegram
async function sendTelegramMessage(chatId, text) {
  try {
    const teleConfig = await Telegram.findOne();
    if (!teleConfig || !teleConfig.bot_notify) return false;
    if (global.bot && typeof global.bot.sendMessage === 'function') {
      // Escape characters that can break basic Markdown parsing (focus on underscore which caused 400 errors)
      const safeText = typeof text === 'string' ? text.replace(/_/g, '\\_') : text;
      await global.bot.sendMessage(chatId, safeText, { parse_mode: 'Markdown' });
    } else {
      const safeText = typeof text === 'string' ? text.replace(/_/g, '\\_') : text;
      await axios.post(`https://api.telegram.org/bot${teleConfig.bot_notify}/sendMessage`, {
        chat_id: chatId,
        text: safeText,
        parse_mode: 'Markdown'
      });
    }
    return true;
  } catch (e) {
    console.error('Telegram send error:', e.message);
    return false;
  }
}

exports.login = async (req, res) => {
  try {
    let { username, password, token: otpToken } = req.body;

    username = username.toLowerCase();

    const user = await User.findOne({ username: username });
    if (!user || !(await user.comparePassword(password))) {
      return res.status(401).json({ error: "Sai t√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u" });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
    if (user.status !== "active") {
      return res.status(403).json({ error: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a" });
    }
    if (user.twoFactorEnabled) {
      if (!otpToken) {
        return res.status(200).json({ twoFactorRequired: true, message: 'Y√™u c·∫ßu m√£ 2FA' });
      }
      // C·∫ßn l·∫•y secret (ƒë√£ b·∫≠t) g·ªìm tr∆∞·ªùng twoFactorSecret (·∫©n theo select:false)
      const userWithSecret = await User.findById(user._id).select('+twoFactorSecret');
      if (!userWithSecret || !userWithSecret.twoFactorSecret) {
        return res.status(500).json({ error: 'Kh√¥ng t√¨m th·∫•y secret 2FA' });
      }
      const verified = speakeasy.totp.verify({
        secret: userWithSecret.twoFactorSecret,
        encoding: 'base32',
        token: otpToken,
        window: 1,
      });
      if (!verified) {
        return res.status(401).json({ error: 'M√£ 2FA kh√¥ng ch√≠nh x√°c' });
      }
    }

    // L∆∞u l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p v√†o m·∫£ng loginHistory
    // ∆Øu ti√™n l·∫•y IP t·ª´ header X-User-IP (IP th·∫≠t t·ª´ client), sau ƒë√≥ m·ªõi d√πng x-forwarded-for
    const ip = req.headers['x-user-ip'] ||
      (req.headers['x-forwarded-for'] || '').split(',')[0].trim() ||
      req.connection.remoteAddress ||
      null;
    const userAgent = req.headers['user-agent'] || '';
    user.loginHistory = user.loginHistory || [];
    user.loginHistory.push({ ip, agent: userAgent, time: new Date() });
    await user.save();
    const token = jwt.sign(
      { username: user.username, userId: user._id, role: user.role },
      process.env.secretKey,
      { expiresIn: '7d' }
    );

    // N·∫øu l√† admin, g·ª≠i th√¥ng b√°o Telegram
    if (user.role === 'admin') {
      const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000);
      const teleConfig = await Telegram.findOne();
      if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
        const telegramMessage =
          `üìå *Admin ƒëƒÉng nh·∫≠p!*\n` +
          `üë§ *Admin:* ${user.username}\n` +
          `üîπ *IP:* ${ip}\n` +
          `üîπ *User-Agent:* ${userAgent}\n` +
          `üîπ *Th·ªùi gian:* ${taoluc.toLocaleString("vi-VN", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
          })}\n`;
        try {
          await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
            chat_id: teleConfig.chatId,
            text: telegramMessage,
            parse_mode: "Markdown",
          });
          console.log("Th√¥ng b√°o Telegram admin ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
        } catch (telegramError) {
          console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
        }
      }
    }
    // ‚úÖ Tr·∫£ v·ªÅ token m·ªõi
    return res.status(200).json({ token, role: user.role, username: user.username, twoFactorEnabled: user.twoFactorEnabled });
  } catch (error) {
    console.error("Login error:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p" });
  }
};

// B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p 2FA: t·∫°o secret t·∫°m & tr·∫£ v·ªÅ QR code + otpauth URL
exports.setup2FA = async (req, res) => {
  try {
    const currentUser = req.user;
    const user = await User.findById(currentUser.userId || currentUser._id);
    if (!user) return res.status(404).json({ error: 'User kh√¥ng t·ªìn t·∫°i' });

    // N·∫øu ƒë√£ b·∫≠t 2FA th√¨ kh√¥ng n√™n cho setup l·∫°i (bu·ªôc disable tr∆∞·ªõc)
    if (user.twoFactorEnabled) {
      return res.status(400).json({ status: false, message: 'B·∫°n ƒë√£ b·∫≠t 2FA. H√£y t·∫Øt tr∆∞·ªõc n·∫øu mu·ªën t·∫°o l·∫°i.' });
    }

    const secret = speakeasy.generateSecret({
      name: `App-${user.username}`,
      length: 20,
    });

    user.twoFactorTempSecret = secret.base32;
    await user.save();

    // T·∫°o QR code t·ª´ otpauth_url
    const qrDataURL = await QRCode.toDataURL(secret.otpauth_url);

    return res.status(200).json({
      status: true,
      otpauth_url: secret.otpauth_url,
      qr: qrDataURL,
      base32: secret.base32,
      message: 'Qu√©t QR trong Google Authenticator v√† x√°c minh b·∫±ng m√£ OTP.'
    });
  } catch (err) {
    console.error('Setup 2FA error:', err);
    return res.status(500).json({ error: 'L·ªói server khi setup 2FA' });
  }
};

// X√°c minh m√£ OTP ƒë·ªÉ k√≠ch ho·∫°t 2FA (d√πng secret t·∫°m)
exports.verify2FA = async (req, res) => {
  try {
    const currentUser = req.user;
    // Ch·∫•p nh·∫≠n c·∫£ 'token' ho·∫∑c 'code' t·ª´ client cho linh ho·∫°t
    const { token, code } = req.body;
    const otp = token || code;
    if (!otp) return res.status(400).json({ error: 'Thi·∫øu m√£ OTP' });

    const user = await User.findById(currentUser.userId || currentUser._id).select('+twoFactorTempSecret +twoFactorSecret');
    if (!user) return res.status(404).json({ status: false, message: 'User kh√¥ng t·ªìn t·∫°i' });
    if (user.twoFactorEnabled) return res.status(400).json({ status: false, message: '2FA ƒë√£ ƒë∆∞·ª£c b·∫≠t' });
    if (!user.twoFactorTempSecret) return res.status(400).json({ status: false, message: 'Ch∆∞a t·∫°o secret t·∫°m' });

    // Speakeasy y√™u c·∫ßu field 'token', kh√¥ng ph·∫£i 'code'.
    const verified = speakeasy.totp.verify({
      secret: user.twoFactorTempSecret,
      encoding: 'base32',
      token: otp,
      window: 1, // Cho ph√©p l·ªách 1 b∆∞·ªõc th·ªùi gian (¬±30s)
    });
    if (!verified) {
      return res.status(400).json({ status: false, message: 'M√£ OTP kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    // Chuy·ªÉn secret t·∫°m th√†nh secret ch√≠nh & b·∫≠t 2FA
    user.twoFactorSecret = user.twoFactorTempSecret;
    user.twoFactorTempSecret = undefined;
    user.twoFactorEnabled = true;
    await user.save();

    return res.status(200).json({ status: true, message: 'K√≠ch ho·∫°t 2FA th√†nh c√¥ng', twoFactorEnabled: true });
  } catch (err) {
    console.error('Verify 2FA error:', err);
    return res.status(500).json({ status: false, message: 'L·ªói server khi verify 2FA' });
  }
};

// T·∫Øt 2FA (y√™u c·∫ßu OTP hi·ªán t·∫°i n·∫øu ƒëang b·∫≠t ƒë·ªÉ tr√°nh b·ªã l·∫°m d·ª•ng)
exports.disable2FA = async (req, res) => {
  try {
    const currentUser = req.user;
    const { code } = req.body; // OTP ƒë·ªÉ x√°c nh·∫≠n t·∫Øt
    const user = await User.findById(currentUser.userId || currentUser._id).select('+twoFactorSecret');
    if (!user) return res.status(404).json({ error: 'User kh√¥ng t·ªìn t·∫°i' });
    if (!user.twoFactorEnabled) return res.status(400).json({ status: false, message: '2FA ch∆∞a b·∫≠t' });
    console.log(code);
    // X√°c th·ª±c OTP tr∆∞·ªõc khi t·∫Øt
    const verified = speakeasy.totp.verify({
      secret: user.twoFactorSecret,
      encoding: 'base32',
      token: code,
      window: 1,
    });
    if (!verified) return res.status(401).json({ status: false, message: 'M√£ OTP kh√¥ng ch√≠nh x√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n' });

    user.twoFactorEnabled = false;
    user.twoFactorSecret = undefined;
    user.twoFactorTempSecret = undefined;
    await user.save();
    return res.status(200).json({ status: true, message: 'ƒê√£ t·∫Øt 2FA th√†nh c√¥ng', twoFactorEnabled: false });
  } catch (err) {
    console.error('Disable 2FA error:', err);
    return res.status(500).json({ error: 'L·ªói server khi t·∫Øt 2FA' });
  }
};

exports.register = async (req, res) => {
  try {
    let { username, password } = req.body;

    // Chuy·ªÉn username th√†nh ch·ªØ th∆∞·ªùng
    username = username.toLowerCase();

    // Ki·ªÉm tra username v√† password kh√¥ng ƒë∆∞·ª£c ng·∫Øn h∆°n 6 k√Ω t·ª±
    if (username.length < 6) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
    }
    if (password.length < 6) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
    }

    // Ki·ªÉm tra username ch·ªâ ch·ª©a ch·ªØ v√† s·ªë (kh√¥ng cho ph√©p k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c g·∫°ch d∆∞·ªõi)
    const usernameRegex = /^[a-zA-Z0-9]+$/;
    if (!usernameRegex.test(username)) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát" });
    }

    // Ki·ªÉm tra username ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ch·ªØ
    const containsLetterRegex = /[a-zA-Z]/;
    if (!containsLetterRegex.test(username)) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ch·ªØ" });
    }

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    const existingUser = await User.findOne({ username: username.toLowerCase() });
    if (existingUser) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
    const isAdminExists = await User.findOne({ role: "admin" });

    // **T·∫°o API key**
    const apiKey = crypto.randomBytes(32).toString("hex");

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const user = new User({
      username,
      password,
      role: isAdminExists ? "user" : "admin",
      apiKey, // **L∆∞u API key**
    });

    await user.save();


    // **Th√¥ng b√°o qua Telegram**
    const teleConfig = await Telegram.findOne();
    if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
      // Gi·ªù Vi·ªát Nam (UTC+7)
      const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000);
      const telegramMessage =
        `üìå *C√≥ kh√°ch m·ªõi ƒë∆∞·ª£c t·∫°o!*\n` +
        `üë§ *Kh√°ch h√†ng:* ${username}\n` +
        `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString("vi-VN", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        })}\n`;
      try {
        await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
          chat_id: teleConfig.chatId,
          text: telegramMessage,
          parse_mode: "Markdown",
        });
        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } catch (telegramError) {
        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
      }
    }

    return res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("ƒêƒÉng k√Ω l·ªói:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i." });
  }
};

exports.getMe = async (req, res) => {
  try {
    const currentUser = req.user; // L·∫•y t·ª´ middleware
    const username = currentUser.username; // L·∫•y username t·ª´ params
    // N·∫øu l√† admin ho·∫∑c ch√≠nh ch·ªß m·ªõi ƒë∆∞·ª£c xem th√¥ng tin
    if (currentUser.role !== "admin" && currentUser.username !== username) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin ng∆∞·ªùi d√πng n√†y" });
    }

    // T√¨m ng∆∞·ªùi d√πng theo username
    const user = await User.findOne({ username }).select("-password");
    if (!user) {
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Tr·∫£ v·ªÅ th√¥ng tin user nh∆∞ng thay token b·∫±ng apiKey
    const loginHistory = Array.isArray(user.loginHistory)
      ? user.loginHistory.slice(-10).reverse()
      : [];
    return res.status(200).json({
      balance: user.balance,
      capbac: user.capbac,
      createdAt: user.createdAt,
      role: user.role,
      status: user.status,
      twoFactorEnabled: user.twoFactorEnabled,
      token: user.apiKey, // Hi·ªÉn th·ªã API Key thay v√¨ token
      tongnap: user.tongnap,
      tongnapthang: user.tongnapthang,
      updatedAt: user.updatedAt,
      userId: user._id,
      telegramChat: user.telegramChatId ? true : false,
      username: user.username,
      loginHistory,
    });
  } catch (error) {
    console.error("Get user error:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß m·ªõi c√≥ th·ªÉ s·ª≠a)
exports.updateUser = async (req, res) => {
  try {
    const currentUser = req.user;
    const { id } = req.params;

    // Ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng n√†y" });
    }

    const updatedData = req.body;
    const updatedUser = await User.findByIdAndUpdate(id, updatedData, { new: true })
      .select("-password");
    if (!updatedUser) {
      return res.status(404).json({ message: "User not found" });
    }
    return res.json(updatedUser);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};
// C·ªông ti·ªÅn v√†o s·ªë d∆∞ (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.addBalance = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn c·ªông ti·ªÅn v√†o s·ªë d∆∞" });
    }
    const { id } = req.params;
    const { amount } = req.body;

    if (!amount || isNaN(amount) || amount <= 0) {
      return res.status(400).json({ message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
    }

    // L·∫•y ng√†y hi·ªán t·∫°i
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1;
    const currentYear = currentDate.getFullYear();

    // T√¨m ng∆∞·ªùi d√πng v√† c·∫≠p nh·∫≠t s·ªë d∆∞
    let user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    const update = {
      $inc: {
        balance: amount,
        tongnap: amount,
        tongnapthang: amount,
      },
      $set: { lastDepositMonth: { month: currentMonth, year: currentYear } },
    };

    const updatedUser = await User.findByIdAndUpdate(id, update, { new: true })
      .select("-password");

    // L∆∞u l·ªãch s·ª≠ giao d·ªãch
    const currentBalance = updatedUser.balance;
    const historyDataa = new HistoryUser({
      username: updatedUser.username,
      madon: "null",
      hanhdong: "C·ªông ti·ªÅn",
      link: "",
      tienhientai: user.balance,
      tongtien: amount,
      tienconlai: currentBalance,
      createdAt: new Date(),
      mota: `Admin c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${amount}`,
    });
    await historyDataa.save();
    const taoluc = new Date();

    // S·ª≠ d·ª•ng c·∫•u h√¨nh Telegram trong DB
    const teleConfig = await Telegram.findOne();
    if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
      // Gi·ªù Vi·ªát Nam (UTC+7)
      const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000);
      const telegramMessage =
        `üìå *C·ªông ti·ªÅn!*\n` +
        `üë§ *Kh√°ch h√†ng:* ${updatedUser.username}\n` +
        `üë§ *C·ªông ti·ªÅn:*  Admin ƒë√£ c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${amount}.\n` +
        `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString("vi-VN", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        })}\n`;
      try {
        await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
          chat_id: teleConfig.chatId,
          text: telegramMessage,
          parse_mode: "Markdown",
        });
        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } catch (telegramError) {
        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
      }
    }
    res.status(200).json({ message: "C·ªông ti·ªÅn th√†nh c√¥ng" });
  } catch (error) {
    console.error("Add balance error:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

// Tr·ª´ ti·ªÅn kh·ªèi s·ªë d∆∞ (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.deductBalance = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn tr·ª´ ti·ªÅn t·ª´ s·ªë d∆∞" });
    }

    const { id } = req.params;
    const { amount } = req.body;

    if (!amount || isNaN(amount) || amount <= 0) {
      return res.status(400).json({ message: "S·ªë ti·ªÅn c·∫ßn tr·ª´ kh√¥ng h·ª£p l·ªá" });
    }

    // T√¨m ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß ƒë·ªÉ tr·ª´ kh√¥ng
    if (user.balance < amount) {
      return res.status(400).json({ message: "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ tr·ª´" });
    }
    const tiencu = user.balance;
    // Tr·ª´ ti·ªÅn v√† c·∫≠p nh·∫≠t s·ªë d∆∞
    const updatedBalance = user.balance - amount;
    const updatedUser = await User.findByIdAndUpdate(
      id,
      { balance: updatedBalance },
      { new: true }
    ).select("-password");

    // L∆∞u l·ªãch s·ª≠ giao d·ªãch
    const historyData = new HistoryUser({
      username: updatedUser.username,
      madon: "null",
      hanhdong: "Tr·ª´ ti·ªÅn",
      link: "",
      tienhientai: tiencu,
      tongtien: amount,
      tienconlai: updatedBalance,
      createdAt: new Date(),
      mota: `Admin tr·ª´ th√†nh c√¥ng s·ªë ti·ªÅn ${amount}`,
    });
    await historyData.save();

    // G·ª≠i th√¥ng b√°o qua Telegram (n·∫øu c·∫•u h√¨nh c√≥ ƒë·ªß)
    const taoluc = new Date();
    const teleConfig = await Telegram.findOne();
    if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
      // Gi·ªù Vi·ªát Nam (UTC+7)
      const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000);
      const telegramMessage =
        `üìå *Tr·ª´ ti·ªÅn!*\n` +
        `üë§ *Kh√°ch h√†ng:* ${updatedUser.username}\n` +
        `üí∏ *S·ªë ti·ªÅn tr·ª´:* Admin ƒë√£ tr·ª´ th√†nh c√¥ng s·ªë ti·ªÅn ${amount}.\n` +
        `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString("vi-VN", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        })}\n`;
      try {
        await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
          chat_id: teleConfig.chatId,
          text: telegramMessage,
          parse_mode: "Markdown",
        });
        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } catch (telegramError) {
        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
      }
    }

    return res.status(200).json({ message: "Tr·ª´ ti·ªÅn th√†nh c√¥ng" });
  } catch (error) {
    console.error("Deduct balance error:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

// X√≥a ng∆∞·ªùi d√πng (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.deleteUser = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng" });
    }
    const { id } = req.params;
    const deletedUser = await User.findByIdAndDelete(id);
    if (!deletedUser) {
      return res.status(404).json({ message: "User not found" });
    }
    return res.json({ message: "X√≥a user th√†nh c√¥ng" });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// ƒê·ªïi m·∫≠t kh·∫©u (ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß t√†i kho·∫£n m·ªõi c√≥ th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u)
exports.changePassword = async (req, res) => {
  try {
    const currentUser = req.user;
    const { id } = req.params;
    const { oldPassword, newPassword } = req.body;

    if (!newPassword) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u m·ªõi
    if (newPassword.length < 6) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
    }

    // Ki·ªÉm tra quy·ªÅn h·∫°n
    if (currentUser.role !== "admin" && currentUser._id.toString() !== id) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng n√†y" });
    }

    // T√¨m user
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // N·∫øu kh√¥ng ph·∫£i admin, ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    if (currentUser.role !== "admin") {
      if (!oldPassword) {
        return res.status(400).json({ error: "Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i" });
      }
      const isMatch = await user.comparePassword(oldPassword);
      if (!isMatch) {
        return res.status(400).json({ error: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c" });
      }
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword;

    // T·∫°o token m·ªõi
    const newToken = jwt.sign(
      { username: user.username, userId: user._id, role: user.role },
      process.env.secretKey
    );

    // **T·∫°o API key m·ªõi**
    const newApiKey = crypto.randomBytes(32).toString("hex");

    // C·∫≠p nh·∫≠t th√¥ng tin m·ªõi v√†o database
    user.apiKey = newApiKey;
    await user.save();

    return res.status(200).json({
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"

    });
  } catch (error) {
    console.error("Change password error:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

// // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
// exports.getAllUsers = async (req, res) => {
//   try {
//     const currentUser = req.user;
//     if (currentUser.role !== "admin") {
//       return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem danh s√°ch ng∆∞·ªùi d√πng" });
//     }
//     const users = await User.find()
//       .select("-password")
//       .sort({ balance: -1 }); // S·∫Øp x·∫øp theo balance t·ª´ cao ƒë·∫øn th·∫•p

//     // L·∫•y t·∫•t c·∫£ user, lo·∫°i b·ªè tr∆∞·ªùng password
//     //const users = await User.find().select("-password");
//     return res.status(200).json({ users });
//   } catch (error) {
//     console.error("Get all users error:", error);
//     return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau." });
//   }
// };
exports.getUsers = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem danh s√°ch ng∆∞·ªùi d√πng" });
    }

    // L·∫•y c√°c tham s·ªë t·ª´ query
    let { username } = req.query;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    // T·∫°o b·ªô l·ªçc t√¨m ki·∫øm
    const filter = username ? { username: { $regex: username, $options: "i" } } : {};

    const skip = (page - 1) * limit;
    const users = await User.find(filter)
      .select("-password")
      .sort({ balance: -1 })
      .skip(skip)
      .limit(limit);

    // T·ªïng s·ªë ng∆∞·ªùi d√πng
    const total = await User.countDocuments(filter);

    return res.json({
      total,
      page,
      totalPages: Math.ceil(total / limit),
      users,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// L·∫•y danh s√°ch l·ªãch s·ª≠ theo username ho·∫∑c orderId, h·ªó tr·ª£ ph√¢n trang
exports.getHistory = async (req, res) => {
  try {
    const currentUser = req.user;
    let { page = 1, limit = 10, orderId, search, action } = req.query;
    page = parseInt(page);
    limit = limit === "all" ? null : parseInt(limit);
    const skip = (page - 1) * (limit || 0);
    let filter = {};

    if (currentUser.role === "admin") {
      // Admin: xem t·∫•t c·∫£, t√¨m ki·∫øm theo username ho·∫∑c orderId
      if (orderId) {
        filter.madon = orderId;
      }
      if (search) {
        filter.username = { $regex: search, $options: "i" };
      }
      if (action) {
        filter.hanhdong = action;
      }
    } else {
      // User th∆∞·ªùng: ch·ªâ xem l·ªãch s·ª≠ c·ªßa ch√≠nh m√¨nh
      filter.username = currentUser.username;
      if (orderId) {
        filter.madon = orderId;
        // filter.search = link;
      }
      if (action) {
        filter.hanhdong = action;
      }
    }

    if (!limit) {
      const history = await HistoryUser.find(filter).sort({ createdAt: -1 });
      return res.status(200).json({
        history,
        totalItems: history.length,
        page: 1,
        totalPages: 1,
      });
    }

    const totalItems = await HistoryUser.countDocuments(filter);
    const totalPages = Math.ceil(totalItems / limit);

    const history = await HistoryUser.find(filter)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    return res.status(200).json({
      history,
      totalItems,
      page,
      totalPages,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y l·ªãch s·ª≠:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// B·∫Øt ƒë·∫ßu t·∫°o m√£ li√™n k·∫øt Telegram
// exports.startTelegramLink = async (req, res) => {
//   try {
//     const currentUser = req.user;
//     const user = await User.findById(currentUser.userId || currentUser._id);
//     if (!user) return res.status(404).json({ error: 'User kh√¥ng t·ªìn t·∫°i' });
//     if (user.telegramChatId) {
//       return res.status(400).json({ message: 'B·∫°n ƒë√£ li√™n k·∫øt Telegram r·ªìi.' });
//     }
//     // D√πng apiKey l√†m m√£ li√™n k·∫øt lu√¥n
//     if (!user.apiKey) {
//       user.apiKey = crypto.randomBytes(32).toString('hex');
//       await user.save();
//     }
//     return res.status(200).json({ code: user.apiKey });
//   } catch (err) {
//     console.error('startTelegramLink error:', err);
//     return res.status(500).json({ error: 'L·ªói server' });
//   }
// };

// H√†m d√πng chung ƒë·ªÉ x·ª≠ l√Ω l·ªánh (d√πng cho polling)
exports.processTelegramCommand = async (chatId, text) => {
  try {
    if (text === '/start') {
      await sendTelegramMessage(chatId, `Ch√†o b·∫°n! Vui l√≤ng truy c·∫≠p v√†o: ${process.env.URL_WEBSITE || ''}/profile\n1. Sao ch√©p API KEY c·ªßa b·∫°n\n2. D√°n API KEY v√†o khung chat n√†y.\n3. Sau khi li√™n k·∫øt: d√πng /balance ƒë·ªÉ xem s·ªë d∆∞, /order M√É ƒê∆†N ƒë·ªÉ ki·ªÉm tra ƒë∆°n, /unlink ƒë·ªÉ h·ªßy li√™n k·∫øt.\n4. G√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.`);
      return;
    }
    if (text === '/help') {
      await sendTelegramMessage(chatId, `H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot:\n1. V√†o website c·ªßa b·∫°n, ƒëƒÉng nh·∫≠p v√† v√†o trang /profile ƒë·ªÉ sao ch√©p API KEY.\n2. Quay l·∫°i ƒë√¢y v√† g·ª≠i API KEY v√†o khung chat n√†y ƒë·ªÉ li√™n k·∫øt t√†i kho·∫£n.\n3. Sau khi li√™n k·∫øt th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ d√πng c√°c l·ªánh sau:\n/balance - Xem s·ªë d∆∞ hi·ªán t·∫°i\n/order M√É ƒê∆†N - Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n c·ªßa b·∫°n\n/unlink - H·ªßy li√™n k·∫øt t√†i kho·∫£n Telegram\n/help - Xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng`);
      return;
    }
    if (/^[a-fA-F0-9]{64}$/.test(text)) {
      const apiKeyRaw = text.trim();
      const user = await User.findOne({ apiKey: { $regex: `^${apiKeyRaw}$`, $options: 'i' } });
      if (!user) {
        await sendTelegramMessage(chatId, 'API KEY kh√¥ng h·ª£p l·ªá. V√†o /profile ƒë·ªÉ copy ƒë√∫ng.');
        return;
      }
      if (user.telegramChatId) {
        await sendTelegramMessage(chatId, 'T√†i kho·∫£n n√†y ƒë√£ li√™n k·∫øt tr∆∞·ªõc ƒë√≥. D√πng /unlink n·∫øu mu·ªën h·ªßy.');
        return;
      }
      const existing = await User.findOne({ telegramChatId: String(chatId) });
      if (existing) {
        await sendTelegramMessage(chatId, 'Chat n√†y ƒë√£ li√™n k·∫øt v·ªõi t√†i kho·∫£n kh√°c. D√πng /unlink n·∫øu mu·ªën ƒë·ªïi.');
        return;
      }
      user.telegramChatId = String(chatId);
      user.telegramLinkedAt = new Date();
      user.telegramBalanceSent = false;
      await user.save();
      await sendTelegramMessage(chatId, `Li√™n k·∫øt th√†nh c√¥ng t√†i kho·∫£n: ${user.username}. D√πng /balance ƒë·ªÉ xem s·ªë d∆∞.`);
      return;
    }
    if (text === '/unlink') {
      const user = await User.findOne({ telegramChatId: String(chatId) });
      if (!user) {
        await sendTelegramMessage(chatId, 'Ch∆∞a li√™n k·∫øt ƒë·ªÉ h·ªßy.');
        return;
      }
      user.telegramChatId = null;
      user.telegramLinkedAt = null;
      await user.save();
      await sendTelegramMessage(chatId, 'ƒê√£ h·ªßy li√™n k·∫øt.V√†o website ƒë·ªÉ l·∫•y API KEY v√† g·ª≠i ƒë·ªÉ li√™n k·∫øt l·∫°i.');
      return;
    }
    if (text === '/balance') {
      const user = await User.findOne({ telegramChatId: String(chatId) });
      if (!user) {
        await sendTelegramMessage(chatId, 'Ch∆∞a li√™n k·∫øt. V√†o website ƒë·ªÉ l·∫•y API KEY v√† g·ª≠i l·∫°i.');
        return;
      }
      await sendTelegramMessage(chatId, `S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: ${Number(Math.floor(Number(user.balance))).toLocaleString("en-US")} VNƒê`);
      return;
    }
    if (text.startsWith('/order')) {
      const parts = text.split(/\s+/);
      if (parts.length !== 2) {
        await sendTelegramMessage(chatId, 'Sai c√∫ ph√°p. D√πng: /order M√É ƒê∆†N');
        return;
      }
      const code = parts[1].trim();
      const user = await User.findOne({ telegramChatId: String(chatId) });
      if (!user) {
        await sendTelegramMessage(chatId, 'Ch∆∞a li√™n k·∫øt. G·ª≠i API KEY tr∆∞·ªõc.');
        return;
      }
      // T√¨m ƒë∆°n theo Madon thu·ªôc v·ªÅ user
      let order = await Order.findOne({ Madon: code, username: user.username });
      if (!order) {
        // fallback t√¨m theo orderId n·∫øu ng∆∞·ªùi d√πng g√µ m√£ h·ªá th·ªëng kh√°c
        order = await Order.findOne({ orderId: code, username: user.username });
      }
      if (!order) {
        await sendTelegramMessage(chatId, 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng c·ªßa b·∫°n v·ªõi m√£ n√†y.');
        return;
      }
      const createdAtVN = new Date(order.createdAt.getTime() + 7 * 60 * 60 * 1000);

      await sendTelegramMessage(chatId,
        `üîé Tr·∫°ng th√°i ƒë∆°n h√†ng\n` +
        `‚Ä¢ M√£ ƒë∆°n: ${order.Madon}\n` +
        `‚Ä¢ D·ªãch v·ª•: ${order.namesv}\n` +
        `‚Ä¢ S·ªë l∆∞·ª£ng: ${order.quantity || 0}\n` +
        `‚Ä¢ B·∫Øt ƒë·∫ßu: ${order.start || 0}\n` +
        `‚Ä¢ ƒê√£ ch·∫°y: ${order.dachay || 0}\n` +
        `‚Ä¢ Tr·∫°ng th√°i: ${order.status}\n` +
        `‚Ä¢ Link: ${order.link}\n` +
        `‚Ä¢ T·∫°o l√∫c: ${createdAtVN.toLocaleString("vi-VN", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        })}\n`);
      return;
    }
    await sendTelegramMessage(chatId, 'L·ªánh kh√¥ng h·ª£p l·ªá. G√µ /start ƒë·ªÉ xem h∆∞·ªõng d·∫´n.');
  } catch (e) {
    console.error('processTelegramCommand error:', e.message);
  }
};




