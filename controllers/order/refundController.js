const Refund = require('../../models/Refund');

const User = require('../../models/User');
const HistoryUser = require('../../models/History');
const Telegram = require('../../models/Telegram');
const axios = require('axios');

exports.getRefunds = async (req, res) => {
    try {
        const user = req.user;
        const { status } = req.query;

        let filter = {};
        if (!user) {
            return res.status(401).json({ error: 'Kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c ng∆∞·ªùi d√πng' });
        }
        filter.status = status ;
        const refunds = await Refund.find(filter).sort({ createdAt: -1 });
        return res.status(200).json({ success: true, data: refunds });
    } catch (error) {
        return res.status(500).json({ success: false, error: error.message });
    }
};

// Controller: Admin c·∫≠p nh·∫≠t status ho√†n ti·ªÅn th√†nh true
exports.adminApproveRefund = async (req, res) => {
    try {
        const user = req.user;
        if (!user || user.role !== 'admin') {
            return res.status(403).json({ error: 'Ch·ªâ admin m·ªõi c√≥ quy·ªÅn duy·ªát ho√†n ti·ªÅn.' });
        }
        const { madon } = req.body;
        if (!madon) {
            return res.status(400).json({ error: 'Thi·∫øu m√£ ƒë∆°n.' });
        }
        const refund = await Refund.findOne({ madon });
        if (!refund) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n ho√†n ti·ªÅn.' });
        }
        if (refund.status === true) {
            return res.status(400).json({ error: 'ƒê∆°n ƒë√£ ƒë∆∞·ª£c duy·ªát ho√†n ti·ªÅn.' });
        }
        // C·∫≠p nh·∫≠t status th√†nh true
        refund.status = true;
        await refund.save();
        // Th·ª±c hi·ªán ho√†n ti·ªÅn cho user
        const targetUser = await User.findOne({ username: refund.username });
        if (!targetUser) {
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.' });
        }
        const tiencu = targetUser.balance || 0;
        targetUser.balance = targetUser.balance + refund.tonghoan;
        await targetUser.save();
        // L∆∞u l·ªãch s·ª≠ ho√†n ti·ªÅn
        const historyData = new HistoryUser({
            username: refund.username,
            madon: refund.madon,
            hanhdong: 'Ho√†n ti·ªÅn',
            link: refund.link || '',
            tienhientai: tiencu,
            tongtien: refund.tonghoan,
            tienconlai: targetUser.balance,
            createdAt: new Date(),
            mota: `${refund.noidung}`,
        });
        await historyData.save();
        const soTienHoanFormatted = Number(Math.round(refund.tonghoan)).toLocaleString("en-US");

        // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
        const taoluc = new Date(Date.now() + 7 * 60 * 60 * 1000);
        const teleConfig = await Telegram.findOne();
        if (teleConfig && teleConfig.botToken && teleConfig.chatId) {
            const telegramMessage =
                `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n` +
                `üë§ *Kh√°ch h√†ng:* ${refund.username}\n` +
                `üÜî *M√£ ƒë∆°n:* ${refund.madon}\n` +
                `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoanFormatted}\n` +
                `üîπ *S·ªë l∆∞·ª£ng ch∆∞a ch·∫°y:* ${refund.chuachay} - Rate: ${refund.giatien}\n` +
                `üî∏ *D·ªãch v·ª•:* ${refund.server}\n` +
                `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString('vi-VN', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                })}\n`;
            try {
                await axios.post(`https://api.telegram.org/bot${teleConfig.botToken}/sendMessage`, {
                    chat_id: teleConfig.chatId,
                    text: telegramMessage,
                    parse_mode: 'Markdown',
                });
            } catch (telegramError) {
                console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
            }
        }
        return res.status(200).json({ success: true, message: 'Duy·ªát ho√†n ti·ªÅn th√†nh c√¥ng.' });
    } catch (error) {
        return res.status(500).json({ error: error.message });
    }
};
